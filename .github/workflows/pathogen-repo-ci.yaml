# This workflow is intended to be called by workflows in our various pathogen
# build repos.  See workflow-templates/pathogen-repo-ci.yaml (a "starter"
# workflow) in this repo for an example of what the caller workflow looks like.
name: CI

on:
  workflow_call:
    inputs:
      repo:
        description: >-
          Repository name with owner (e.g. nextstrain/zika).  Defaults to the
          repository of the caller workflow.
        type: string
        default: ${{ github.repository }}
        required: false

      runtimes:
        description: >-
          List of Nextstrain runtimes under which to run the build, as a string
          containing YAML.  This is easily produced, for example, by pretending
          you're writing normal nested YAML within a literal multi-line block
          scalar (introduced by "|"):

            with:
              runtimes: |
                - docker
                - conda

          Defaults to "docker" and "conda".  One job per runtime will be run.
        type: string
        default: |
          - docker
          - conda
        required: false

      run:
        description: >-
          The full `nextstrain build` command to run for the build.
          Defaults to `nextstrain build .`

          Use the runtime input to select the runtime for the build instead of
          the runtime selection options to ensure that the runtime is properly
          set up within the GitHub Action job.

          The pathogen repo is cloned to the top level of the working directory
          of the GitHub Action, so use `.` to point to the pathogen repo directory.

          If your build runs longer than the 6 hour limit for GitHub Action jobs,
          consider using the `--detach` flag for the aws-batch runtime.

          All environment variables provided via the env input and all secrets
          provided via `secrets: inherit` can be passed to the build runtime
          via the `--env` option.
        type: string
        default: nextstrain build .
        required: false

      env:
        description: >-
          Additional environment variables to set before the build, as a string
          containing YAML.  This is easily produced, for example, by pretending
          you're writing normal nested YAML within a literal multi-line block
          scalar (introduced by "|"):

            with:
              env: |
                FOO: bar
                I_CANT_BELIEVE: "it's not YAML"
                would_you_believe: |
                  it's
                  not
                  yaml

          Do not use for secrets!  Instead, pass them via GitHub Action's
          dedicated secrets mechanism.
        type: string
        default: ""
        required: false

      artifact-name:
        description: >-
          Name to use for build results artifact uploaded at the end of the
          workflow.  This name will be suffixed with other information from the
          workflow job matrix to distinguish each artifact in a workflow run.

          If you're invoking this workflow multiple times from the same calling
          workflow, you should set this.  Otherwise, the default of "outputs"
          is probably fine.
        type: string
        default: outputs
        required: false

      artifact-paths:
        description: >-
          List of paths to include in the build output artifact uploaded
          at the end of the workflow, as a string following the format of the
          `paths` input of the `actions/upload-artifact` action.
          For example:

            with:
              artifact-paths: |
                results/
                auspice/
                logs/

          The default paths included in the artifact are:

            build.log
            auspice/
            results/
            benchmarks/
            logs/
            .snakemake/log/

          The "build.log" contains log messages from the `nextstrain build` command.
          The other paths are common output paths for Nextstrain builds.
          If a path does not exist in your build, then the action will still
          succeed and will print out a warning for the non-existent file(s).
          Use an exclude pattern for any of the default paths that you would like to
          exclude from the artifact (e.g. !build.log).

          This is not supported for builds on AWS Batch because the workflow
          detaches from the build. Please use the `nextstrain build` command
          locally to reattach to AWS Batch builds to download outputs.
        type: string
        required: false

      continue-on-error:
        description: >-
          Pass thru for <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error>.
        type: boolean
        default: false
        required: false

jobs:
  configuration:
    runs-on: ubuntu-latest
    steps:
      - id: inputs
        env:
          runtimes: ${{ inputs.runtimes }}
        shell: bash
        run: |
          runtimes="$(yq --output-format=json --indent=0 . <<<"$runtimes")"
          echo runtimes="$runtimes" | tee -a "$GITHUB_OUTPUT"
    outputs:
      runtimes: ${{ steps.inputs.outputs.runtimes }}

  build:
    needs: configuration
    strategy:
      fail-fast: false
      matrix:
        runtime: ${{ fromJSON(needs.configuration.outputs.runtimes) }}
    permissions:
      contents: read
      packages: read
      id-token: write
    name: build (${{ matrix.runtime }})
    # The "uses:" key can't be interpolated (${{â€¦}}) so the ref must be hard-coded
    # We cannot use the workflow-context action here because this calling a
    # reusable workflow as a full job rather than a step within the job.
    #
    # Update the hardcoded ref below when you make future changes to the pathogen-repo-build.
    #   -Jover, 19 Oct 2023
    uses: nextstrain/.github/.github/workflows/pathogen-repo-build.yaml@f98902bae5286e22e834a634417120626bc676f9
    secrets: inherit
    with:
      repo: ${{ inputs.repo }}
      runtime: ${{ matrix.runtime }}
      run: ${{ inputs.run }}
      env: ${{ inputs.env }}
      artifact-name: ${{ inputs.artifact-name }}-${{ matrix.runtime }}
      artifact-paths: ${{ inputs.artifact-paths }}
      continue-on-error: ${{ inputs.continue-on-error }}
      copy-example-data: true
