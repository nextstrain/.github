# This workflow is intended to be called by workflows in our various pathogen
# build repos.  See workflow-templates/pathogen-repo-builds.yaml (a "starter"
# workflow) in this repo for an example of what the caller workflow looks like.
name: Pathogen repo build

defaults:
  run:
    # This is the same as GitHub Action's `bash` keyword as of 20 June 2023:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
    #
    # Completely spelling it out here so that GitHub can't change it out from under us
    # and we don't have to refer to the docs to know the expected behavior.
    shell: bash --noprofile --norc -eo pipefail {0}

on:
  workflow_call:
    inputs:
      repo:
        description: >-
          Repository name with owner (e.g. nextstrain/zika). Defaults to the
          repository of the caller workflow.
        type: string
        default: ${{ github.repository }}
        required: false

      runtime:
        description: >-
          Nextstrain runtime under which to run the build.
          Currently only supports docker, conda, and aws-batch.
          Defaults to "docker".

          The aws-batch runtime requires the secrets:

          - AWS_ACCESS_KEY_ID
          - AWS_SECRET_ACCESS_KEY

          They must be defined in the repo's Actions secrets and passed to this
          workflow with `secrets: inherit`.
        type: string
        default: docker
        required: false

      run:
        description: >-
          The full `nextstrain build` command to run for the build.
          Defaults to `nextstrain build .`

          Use the runtime input to select the runtime for the build instead of
          the runtime selection options to ensure that the runtime is properly
          set up within the GitHub Action job.

          The pathogen repo is cloned to the top level of the working directory
          of the GitHub Action, so use `.` to point to the pathogen repo directory.

          If your build runs longer than the 6 hour limit for GitHub Action jobs,
          consider using the `--detach` flag for the aws-batch runtime.

          All environment variables provided via the env input and all secrets
          provided via `secrets: inherit` can be passed to the build runtime
          via the `--env` option.
        type: string
        default: nextstrain build .
        required: false

      env:
        description: >-
          Environment variables to set for this reusable workflow since
          environment variables in the caller workflow are not propagated to
          reusable workflows. This is expected to be a string containing YAML.

          This is easily produced, for example, by pretending
          you're writing normal nested YAML within a literal multi-line block
          scalar (introduced by "|"):

            with:
              env: |
                FOO: bar
                I_CANT_BELIEVE: "it's not YAML"
                would_you_believe: |
                  it's
                  not
                  yaml

          Do not use for secrets!  Instead, pass them via GitHub Action's
          dedicated secrets mechanism.
        type: string
        default: ""
        required: false

      artifact-name:
        description: >-
          Name to use for the build output artifact uploaded at end of the workflow.

          If you're invoking this workflow multiple times from the same calling
          workflow, you should set this. Otherwise, the default "build-outputs"
          is probably fine.
        type: string
        default: build-outputs
        required: false

      artifact-paths:
        description: >-
          List of paths to include in the build output artifact uploaded
          at the end of the workflow, as a string following the format of the
          `paths` input of the `actions/upload-artifact` action.
          For example:

            with:
              artifact-paths: |
                results/
                auspice/
                logs/

          The default paths included in the artifact are:

            build.log
            auspice/
            results/
            benchmarks/
            logs/
            .snakemake/log/

          The "build.log" contains log messages from the `nextstrain build` command.
          The other paths are common output paths for Nextstrain builds.
          If a path does not exist in your build, then the action will still
          succeed and will print out a warning for the non-existent file(s).
          Use an exclude pattern for any of the default paths that you would like to
          exclude from the artifact (e.g. !build.log).

          This is not supported for builds on AWS Batch because the workflow
          detaches from the build. Please use the `nextstrain build` command
          locally to reattach to AWS Batch builds to download outputs.
        type: string
        required: false

      continue-on-error:
        description: >-
          Pass thru for <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error>.
        type: boolean
        default: false
        required: false

      copy-example-data:
        description: >-
          Copy top level `example_data` if available in the pathogen repo to `data`
          This will only work if your run command use the top level directory
          since it only copies the data to the top level.

          Added to keep the pathogen-repo-ci backwards compatible, but we expect
          workflows to prepare their own example data within subdirectories.
        type: boolean
        default: false
        required: false

env:
  NEXTSTRAIN_GITHUB_DIR: .git/nextstrain/.github

jobs:
  workflow-context:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - id: workflow-context
        uses: nextstrain/.github/actions/workflow-context@master
    outputs:
      repository: ${{ steps.workflow-context.outputs.repository }}
      sha: ${{ steps.workflow-context.outputs.sha }}

  run-build:
    needs: workflow-context
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.continue-on-error }}
    permissions:
      contents: read
      packages: read
    steps:
      # Log in, if possible, to docker.io (Docker Hub), since authenticated
      # requests get higher rate limits (e.g. for image pulls).  Our org-level
      # secret DOCKER_TOKEN_PUBLIC_READ_ONLY is available to all our public
      # repos on GitHub but only available here to this reusable workflow when
      # called with "secrets: inherit".  On Docker Hub, the token is granted
      # "public read-only" access.
      #
      # The secrets context is not allowed in "if:" conditions, so we must
      # launder it thru env.
      - if: env.token-available == 'true'
        env:
          token-available: ${{ secrets.DOCKER_TOKEN_PUBLIC_READ_ONLY != '' }}
        name: Log in to docker.io
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: nextstrainbot
          password: ${{ secrets.DOCKER_TOKEN_PUBLIC_READ_ONLY }}
        continue-on-error: true

      # Log in, if possible, to ghcr.io which we use for staging images in
      # nextstrain/docker-base.  The automatic GITHUB_TOKEN is restricted to
      # read-only access by the "permissions:" block above.
      - name: Log in to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout build repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}

      # Need to run this after the build repo is cloned so that cloning the
      # build repo does not overwrite the .git dir and remove the extra support files
      # that we need from nextstrain/.github repo
      - name: Checkout ${{ needs.workflow-context.outputs.repository }} (sha ${{ needs.workflow-context.outputs.sha }})
        uses: actions/checkout@v3
        with:
          repository: ${{ needs.workflow-context.outputs.repository }}
          ref: ${{ needs.workflow-context.outputs.sha }}
          path: ${{ env.NEXTSTRAIN_GITHUB_DIR }}

      - name: Setup runtime ${{ inputs.runtime }}
        uses: ./.git/nextstrain/.github/actions/setup-nextstrain-cli
        with:
          cli-version: ">=7.1.0"
          runtime: ${{ inputs.runtime }}
        # Required to set up aws-batch as default runtime
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - if: inputs.env
        name: Set environment variables
        env:
          env: ${{ inputs.env }}
        run: >
          # shellcheck disable=SC2154

          echo "$env"
          | "$NEXTSTRAIN_GITHUB_DIR"/bin/yaml-to-envvars
          | tee -a "$GITHUB_ENV"

      - name: Set secrets as environment variables
        env:
          secrets: ${{ toJson(secrets) }}
        run: >
          # shellcheck disable=SC2154

          echo "$secrets"
          | jq 'del(.github_token)'
          | "$NEXTSTRAIN_GITHUB_DIR"/bin/json-to-envvars
          | tee -a "$GITHUB_ENV"

      - if: inputs.copy-example-data
        name: Copy example data
        run: |
          if [[ -d example_data ]]; then
            mkdir -p data/
            cp -r -v example_data/* data/
          else
            echo No example data to copy.
          fi

      - name: Run build via ${{ inputs.runtime }}
        env:
          NEXTSTRAIN_BUILD_COMMAND: ${{ inputs.run }}
        run: |
          # shellcheck disable=SC2154
          set -x

          eval "$NEXTSTRAIN_BUILD_COMMAND" |& tee build.log

      - if: ${{ inputs.runtime == 'aws-batch' }}
        name: Get AWS Batch job id
        id: aws-batch
        run: |
          echo "AWS_BATCH_JOB_ID=$(sed -nE 's/.+AWS Batch Job ID\:.+ ([-a-f0-9]+)$/\1/p' < build.log)" >> "$GITHUB_ENV"

      - if: env.AWS_BATCH_JOB_ID
        name: Generate AWS Batch summary
        run: |
          "$NEXTSTRAIN_GITHUB_DIR"/bin/interpolate-env < "$NEXTSTRAIN_GITHUB_DIR"/text-templates/attach-aws-batch.md \
          > "$GITHUB_STEP_SUMMARY"

      - if: always()
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: ${{ inputs.artifact-name }}
          path: |
            build.log
            auspice/
            results/
            benchmarks/
            logs/
            .snakemake/log/
            ${{ inputs.artifact-paths }}
