#!/usr/bin/env python3
"""
usage: extract-shell-from-gh-workflow [-0] <output-dir> <workflow-file> [<workflow-file> […]]

Writes the shell snippets in a GitHub Actions workflow file to a set of
separate files.  There's one file for each workflow × job × step (with a "run"
block).  The produced file names are printed to stdout.  Use the -0 option to
terminate them with a null byte (\\x00) instead of a newline (\\x0a).
"""
from pathlib import Path
from shlex import split as shsplit
import argparse
import re
import sys
import yaml


__usage__ = __doc__


def main(output_dir, *workflow_files, terminator = "\n"):
    if not output_dir:
        return fatal(f"no output dir given")

    output_dir = Path(output_dir)

    if not output_dir.is_dir():
        return fatal(f"output path {output_dir!r} is not a directory or does not exist")

    if not workflow_files:
        return fatal(f"no workflow files given")

    for workflow_file in (Path(w) for w in workflow_files):
        with workflow_file.open("r", encoding = "utf-8") as fh:
            workflow = yaml.safe_load(fh)

        workflow_output_dir = output_dir / workflow_file.name
        workflow_output_dir.mkdir()

        for job_name, job in workflow.get("jobs", {}).items():
            job_output_dir = workflow_output_dir / f"job-{fssafe(job_name)}"
            job_output_dir.mkdir()

            extract_shell_steps(workflow, job, job_output_dir, terminator)


def extract_shell_steps(workflow, job, job_output_dir, terminator):
    for step_idx, step in enumerate(job.get("steps", []), 1):
        step_name = step.get("name", str(step_idx))
        run_shell = step.get("run")

        if run_shell is None:
            continue

        shell = shell_name(workflow, job, step)

        if shell not in {"bash", "sh"}:
            continue

        # Replace GitHub Actions workflow interpolations (${{ … }})
        # with a placeholder so it doesn't cause false issues reported
        # by ShellCheck.
        run_shell = re.sub(r'\$\{\{.+?\}\}', "…", run_shell)

        step_output_file = job_output_dir / f"step-{fssafe(step_name)}"

        with step_output_file.open("w", encoding = "utf-8") as fh:
            print(f"#!/bin/{shell}", file = fh)
            print(run_shell, file = fh)

        print(step_output_file, end = terminator)


def shell_name(workflow, job, step):
    def default_shell(x):
        x.get("defaults", {}).get("run", {}).get("shell")

    shell = step.get("shell") \
         or default_shell(job) \
         or default_shell(workflow)

    if shell:
        return Path(shsplit(shell)[0]).stem.lower()
    else:
        # defaults from <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell>
        return "pwsh" if runs_on_windows(job) else "bash"


def runs_on_windows(job):
    runs_on = job.get("runs-on")

    # XXX TODO: runs-on may be a list of labels or even a dictionary of {group,
    # labels}¹, but we don't handle that here (and can't really know what an
    # arbitrary label means anyway).
    #   -trs, 7 March 2023
    #
    # ¹ <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on>
    if not isinstance(runs_on, str):
        return None

    return runs_on.lower().startswith("windows-")


def fssafe(name):
    return re.sub(r'[^a-zA-Z0-9_-]+', "-", name)


def fatal(error):
    print(error, file = sys.stderr)
    print(__usage__)
    return 1


if __name__ == "__main__":
    args = sys.argv[1:]
    kwargs = {}

    if args and args[0] == "-0":
        kwargs["terminator"] = "\0"
        del args[0]

    sys.exit(main(*args, **kwargs))
